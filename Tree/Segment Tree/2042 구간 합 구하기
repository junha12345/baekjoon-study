import sys
input = sys.stdin.readline

def init(node, start, end) : #세그먼트 트리 구성
    if start == end :
        tree[node] = l[start]
        return tree[node]
    else :
        tree[node] = init(node*2, start, (start+end)//2) + \
        init(node*2+1, (start+end)//2+1, end)
        return tree[node]

def subsum(node, start, end, left, right) : #구하고자 하는 합 노드탐색
    if left > end or right < start :
        return 0
    if left <= start and end <= right :
        return tree[node]
    return subsum(node*2, start, (start+end)//2, left, right) + \
    subsum(node*2+1, (start+end)//2+1, end, left, right)

def update(node, start, end, index, diff) : #변경 후 차이만큼 업데이트
    if index < start or index > end : return
    tree[node] += diff
    if start != end :
        update(node*2, start, (start+end)//2, index, diff)
        update(node*2+1, (start+end)//2+1, end, index, diff)

n, m, k = map(int, input().split())
l = []
tree = [0]*3000000
for _ in range(n) :
    l.append(int(input()))
init(1, 0, n-1) #트리구성, node = 1번부터, start = 0부터, end = n-1까지
for _ in range(m+k) :
    op, a, b = map(int, input().split())
    if op == 1 :
        a -= 1
        diff = b-l[a]
        l[a] = b
        update(1, 0, n-1, a, diff)
    else :
        print(subsum(1, 0, n-1, a-1, b-1))
