#        1 2 3 4 5 6 7 8
#    1 3 5 6         2 4 7 8
#  5 6     1 3     7 8     2 4
# 6   5   3   1   8   7   2   4

# sol = query에서 l, r 범위가 포함할때 = list길이 - k보다 작은개수 
# 일부 포함일때 = 자식노드 탐색

import sys
from bisect import bisect_right # 이진탐색(오른쪽 삽입)
input = sys.stdin.readline

def init() :
    for i in range(n-1,0,-1) :
        l, h = 0, 0
        while l<len(tree[i<<1]) and h<len(tree[i<<1|1]) :
            if tree[i<<1][l]<tree[i<<1|1][h] :
                tree[i].append(tree[i<<1][l])
                l += 1
            else :
                tree[i].append(tree[i<<1|1][h])
                h += 1
        tree[i] += tree[i<<1][l:]
        tree[i] += tree[i<<1|1][h:]

def query(l,r,idx) :
    l += n
    r += n
    ans = 0
    while l<r :
        if l%2 == 1 :
            ans += len(tree[l])-bisect_right(tree[l], idx)
            l += 1
        if r%2 == 1 :
            ans += len(tree[r-1])-bisect_right(tree[r-1], idx)
            r -= 1
        l//=2
        r//=2
    return ans
    
n = int(input())
nlist = list(map(int, input().split()))
tree = [[] for _ in range(2*n)]
for i in range(n,2*n) :
    tree[i].append(nlist[i-n])
init()
q = int(input())
for _ in range(q) :
    x, y, k = map(int, input().split())
    print(query(x-1,y,k))
