import sys
from math import *
input = sys.stdin.readline
# sol = 세그트리에 [num, lazy] 로 두어 필요할때 num += lazy, lazy = 0 으로 초기화
# 필요없는경우 lazy만 추가
# a == 1 -> b~c 까지 d만큼 +
# a == 2 -> b~c 까지의 합 출력

def init(node, s, e) : #세그먼트 트리 구성
    if s == e :
        tree[node][0] = nlist[s]
        return tree[node][0]
    mid = (s+e)//2
    tree[node][0] = init(node*2,s,mid) + init(node*2+1,mid+1,e)
    return tree[node][0]

def propagation(node, s, e) # 업데이트 해야할 노드인지 판단

def query(node, s, e, l, r) : #구하고자 하는 합 노드탐색
    if l > e or r < s :
        return 0
    if l <= s and e <= r :
        return tree[node][0]
    mid = (s+e)//2
    return query(node*2,s,mid,l,r) + query(node*2+1,mid+1,e,l,r)

def update(node, s, e, index, diff) : #변경 후 차이만큼 업데이트
    if index < s or index > e : return
    tree[node][0] += diff
    if s != e :
        mid = (s+e)//2
        update(node*2,s,mid,index,diff)
        update(node*2+1,mid+1,e,index,diff)

n, m, k = map(int, input().split())
nlist = []
h = ceil(log2(n))
size = 1 << (h+1)
tree = [[0,0]]*(size) # 값, 추가할 값
init(1,0,n-1)
for _ in range(n) :
    nlist.append(int(input()))
for _ in range(m+k) :
    q = list(map(int, input().split()))
    if q[0] == 1 :
        update
    else :
        query(1,0,n-1,q[1]-1,q[2]-1)
