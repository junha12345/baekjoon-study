import sys
from collections import deque
input = sys.stdin.readline
# 각 근원지의 문명번호 i  거기서 bfs로 확산, 다른 문명에 경우 숫자결합, union에 확인

def bfs(m) :
    cnt = 0
    year = 0
    while max(rank)<m :
        year += 1
        p = len(q)
        for _ in range(p) :
            x,y,c1 = q.popleft()
            c1 = parent[c1]
            for i in range(4) :
                nx = x+dx[i]
                ny = y+dy[i]
                if 0<=nx<n and 0<=ny<n :
                    c2 = graph[nx][ny]
                    if c2 == 0 :
                        graph[nx][ny] = c1
                        q.append([nx,ny,c1])
                    elif c1 != c2 and parent[c1] != parent[c2] :
                        union(c1, c2)
        check()
    return year

def find(x) :
    if x == parent[x] : return x
    parent[x] = find(parent[x])
    return parent[x]

def union(a,b) :
    x = min(a,b)
    y = max(a,b)
    x = find(x)
    y = find(y)
    if x==y : return
    if rank[x]<rank[y] :
        parent[x] = y
        rank[y] += rank[x]
    else :
        parent[y] = x
        rank[x] += rank[y]

#근접결합 확인
def check() :
    cnt = 0
    for i in range(len(q)) :
        x,y,c = q.popleft()
        for i in range(4) :
            nx = x+dx[i]
            ny = y+dy[i]
            if 0<=nx<n and 0<=ny<n and graph[nx][ny] != 0 and parent[graph[x][y]] != parent[graph[nx][ny]] :
                union(c,graph[nx][ny])
                graph[nx][ny]=c
        q.append([x,y,graph[x][y]])

n, k = map(int, input().split())
graph = [[0]*n for _ in range(n)]
parent = [i for i in range(k+1)]
rank = [1]*(k+1)
dx = [-1,1,0,0]
dy = [0,0,-1,1]
q = deque()
for i in range(1,k+1) :
    a,b = map(int, input().split())
    graph[a-1][b-1] = i
    q.append([a-1,b-1,i])
check()
ans = bfs(k)
print(ans)
