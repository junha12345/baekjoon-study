import sys
input = sys.stdin.readline
sys.setrecursionlimit(10**4)
INF = int(1e9)

def dist(a, b) : # a에서 b로 or b에서 a로
    if a == 0 : return abs(mis[b][0]-1)+abs(mis[b][1]-1)
    elif b == 0 : return abs(mis[a][0]-n)+abs(mis[a][1]-n)
    else : return abs(mis[a][0]-mis[b][0])+abs(mis[a][1]-mis[b][1])

def trace(x, y, cnt) :
    global sol
    if x == 0 and y == 1 : 
        sol.append(2)
        return
    elif x == 1 and y == 0 :
        sol.append(1)
        return
    if x-y == 1 :
        for i in range(y) :
            if cnt-dp[i][y] == dist(i,x) :
                cnt = dp[i][y]
                sol.append(1)
                trace(i,y, cnt)
    elif y-x == 1 :
        for i in range(x) :
            if cnt-dp[x][i] == dist(y,i) :
                cnt = dp[x][i]
                sol.append(2)
                trace(x,i, cnt)
    else :
        if x>y :
            sol += [1]*(x-(y+1))
            cnt = dp[y+1][y]
            trace(y+1,y, cnt)
        else :
            sol += [2]*(y-(x+1))
            cnt = dp[x][x+1]
            trace(x,x+1, cnt)

n = int(input())
m = int(input())
mis = [[]]
for _ in range(m) :
    mis.append(list(map(int, input().split())))
# dp[i][j] = d # a가 i번쨰 사건 위치, b가 j번째 사건위치에 있을때 최소거리 d
dp = [[INF]*(1001) for _ in range(1001)]
dp[0][0] = 0
dp[0][1] = abs(n-mis[1][0])+abs(n-mis[1][1])
dp[1][0] = abs(1-mis[1][0])+abs(1-mis[1][1])
for i in range(2,m+1) : # i번째 사건을 맡음
    for j in range(i-1) :
        if dp[i-1][j] != INF :
            dp[i][j] = min(dp[i][j], dp[i-1][j]+dist(i-1,i))
            dp[i-1][i] = min(dp[i-1][i], dp[i-1][j]+dist(i,j))
        if dp[j][i-1] != INF :
            dp[j][i] = min(dp[j][i], dp[j][i-1]+dist(i,i-1))
            dp[i][i-1] = min(dp[i][i-1], dp[j][i-1]+dist(j,i))
ans = []
sol = [] # 역추적 결과
for i in range(m) :
    if dp[m][i] != INF : ans.append([dp[m][i], m, i])
    if dp[i][m] != INF : ans.append([dp[i][m], i, m])
cnt = INF
for i in range(len(ans)) :
    if ans[i][0]<cnt :
        cnt = ans[i][0]
        idx = i
print(cnt)
trace(ans[idx][1], ans[idx][2], cnt)
sol.reverse()
for i in range(len(sol)) :
    print(sol[i])
