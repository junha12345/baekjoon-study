import sys
import heapq
input = sys.stdin.readline

def dijkstra(start, end) :
    q = []
    distance = [INF] * (n+1)
    distance[start] = 0
    heapq.heappush(q, (distance[start], start))
    while q :
        dist, node = heapq.heappop(q)
        if distance[node] < dist :
            continue
        for i in graph[node] :
            cost = distance[node] + i[1]
            if cost < distance[i[0]] :
                distance[i[0]] = cost
                heapq.heappush(q, (cost, i[0]))
    return distance[end]

t = int(input())
sol = [[] for _ in range(t)]
INF = int(1e9)
for j in range(t) :
    candidate = [] # 목적지 후보 저장
    n, m, cand = map(int, input().split()) # n = 점, m = 선, cnad = 후보갯수
    start, g, h = map(int, input().split()) # g, h 사이 도로를 필수적으로 건너야함 
    graph = [[] for _ in range(n+1)]
    for _ in range(m) :
        a, b, c = map(int, input().split())
        graph[a].append([b, c])
        graph[b].append([a, c])
    for _ in range(cand) :
        candidate.append(int(input()))
    for i in range(len(graph[g])) :
        if graph[g][i][0] == h :
            d = graph[g][i][1]
            break
    # 아이디어 = 출발 -> (g -> h) or (h -> g) -> 도착지점 까지의 거리
    # == 출발 -> 도착지점 까지의 거리
    for i in range(len(candidate)) :
        c1 = dijkstra(start, g)
        c2 = dijkstra(start, h)
        c3 = dijkstra(g, candidate[i])
        c4 = dijkstra(h, candidate[i])
        if (dijkstra(start, candidate[i]) == c1 + d + c4) or (dijkstra(start, candidate[i]) == c2 + d + c3) :
            sol[j].append(candidate[i])

for i in range(len(sol)) :
    sol[i].sort()
    for j in sol[i] :
        print(j, end= ' ')
    print()
