import sys
import heapq
input = sys.stdin.readline
INF = int(1e9)

n, m, k = map(int, input().split()) # 편의점 수, 경로 수, 라면섭취 일수
nlist = [0]
nlist.extend(map(int, input().split()))
graph = [[] for _ in range(n+1)]
dlist = [[INF, 0] for _ in range(n+1)] # 거리, 노드
start = []
for _ in range(m) :
    a, b, d = map(int, input().split())
    graph[a].append([b, d])
    graph[b].append([a, d])
for _ in range(k) :
    start.append(int(input()))

def dijkstra(start) :
    q = []
    heapq.heappush(q, [0, start])
    dlist[start] = [0, start]
    while q :
        dist, node = heapq.heappop(q)
        if dist > dlist[node][0] :
            continue
        for i in graph[node] :
            cost = dlist[node][0] + i[1]
            if cost < dlist[i[0]][0] :
                dlist[i[0]] = [cost, node]
                heapq.heappush(q, [cost, i[0]])
dijkstra(2)
print(dlist)
'''
path = last
while dlist[path][1] != 1 :
    if nlist[dlist[path][1]] != 0 :
        nlist[dlist[path][1]] -= 1
        return path
    else : path = dlist[path][1]
return -1 
'''
