import sys
import heapq
input = sys.stdin.readline
INF = int(1e9)
t = int(input())

for _ in range(t) :
    n, m, k = map(int, input().split()) # 공항수, 돈, 길
    graph = [[] for _ in range(n+1)]
    for _ in range(k) :
        a, b, c, t = map(int, input().split())
        graph[a].append([b, c, t]) # graph[a] = to b, cost, time
    dp = [[INF for _ in range(m+1)] for _ in range(n+1)] # dp[node][cost] = time
    q = []
    dp[1][0] = 0
    heapq.heappush(q, (0, 0, 1)) # time, cost, node
    while q :
        time, cost, node = heapq.heappop(q)
        for i in graph[node] :
            if cost+i[1]>m : continue
            ncost = cost + i[1]
            ntime = time + i[2]
            if dp[i[0]][ncost] <= ntime : continue
            dp[i[0]][ncost] = ntime
            heapq.heappush(q, (ntime, ncost, i[0]))
    if min(dp[n]) == INF : print("Poor KCM")
    else : print(min(dp[n]))
