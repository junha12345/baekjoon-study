import sys
import heapq
input = sys.stdin.readline
INF = int(1e9)

n, m, r = map(int, input().split()) # 지역, 수색범위, 길
items = [0]+list(map(int, input().split()))
graph = [[] for _ in range(n+1)]
for _ in range(r) :
    a, b, d = map(int, input().split())
    graph[a].append([b,d])
    graph[b].append([a,d])

def dijkstra(start) :
    q = []
    distance[start] = 0
    heapq.heappush(q, [distance[start], start])
    while q :
        dist, node = heapq.heappop(q)
        if distance[node] < dist :
            continue
        for x, y in graph[node] :
            cost = distance[node] + y
            if cost < distance[x] :
                distance[x] = cost
                heapq.heappush(q, [cost, x])
    cnt = 0
    for i in range(1,n+1) :
        if distance[i]<=m : cnt += items[i]
    return cnt

ans = 0
for i in range(1,n+1) :
    distance = [INF]*(n+1)
    idx = dijkstra(i)
    if idx>ans : ans = idx
print(ans)
