import sys
from collections import deque
input = sys.stdin.readline
INF = int(1e9)
t = int(input())

for _ in range(t) :
    n, m, k = map(int, input().split()) # 공항수, 돈, 길
    graph = [[] for _ in range(n+1)]
    for _ in range(k) :
        a, b, c, t = map(int, input().split())
        graph[a].append([b, c, t]) # graph[a] = to b, cost, time
    dp = [[INF]*(m+1) for _ in range(n+1)] # dp[node][cost] = time
    dp[1][0] = 0
    q = deque([(0, 0, 1)])
    while q :
        time, cost, node = q.popleft()
        if dp[node][cost] < time : continue
        for nn, nc, nt in graph[node] :
            tmp_c = nc + cost
            tmp_t = nt + time
            if tmp_c <= m and tmp_t < dp[nn][tmp_c] :
                for i in range(tmp_c, m+1) :
                    if tmp_t < dp[nn][i]: dp[nn][i] = tmp_t
                    else : break
                q.append((tmp_t, tmp_c, nn))
    print(dp[n][m] if dp[n][m] != INF else "Poor KCM")
