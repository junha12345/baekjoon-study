import sys
import heapq
input = sys.stdin.readline

# n = 도시개수 , m = 버스 개수
n = int(input())
m = int(input())
graph = [[] for _ in range(n+1)]
INF = int(1e9)
distance = [INF] * (n+1)

for _ in range(m) :
    a, b, c = map(int, input().split())
    graph[a].append([b, c])

start, end = map(int, input().split())

def dijkstra(start) :
    q = []
    heapq.heappush(q, (0, start)) # q = [거리, 노드]
    distance[start] = 0
    while q :
        dist, node = heapq.heappop(q)
        if dist > distance[node] :
            continue
        for i in graph[node] :
            cost = distance[node] +i[1]
            if cost < distance[i[0]] :
                distance[i[0]] = cost
                heapq.heappush(q, (cost, i[0]))

dijkstra(start)
print(distance[end])
