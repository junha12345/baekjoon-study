import sys
import heapq
input = sys.stdin.readline

n, m = map(int, input().split())
start = int(input())
graph = [[] for _ in range(n+1)]
INF = int(1e9)
dp = [INF] * (n+1)

for _ in range(m) :
    a, b, c = map(int, input().split())
    graph[a].append([b, c]) # b = 도착지점 , c = 거리

def dijkstra(start) :
    q = []
    heapq.heappush(q, (0, start))
    dp[start] = 0
    while q :
        dist, node = heapq.heappop(q)
        if dist > dp[node] :
            continue
        for i in graph[node] :
            cost = dp[node] + i[1]
            if cost < dp[i[0]] :
                dp[i[0]] = cost
                heapq.heappush(q, (cost, i[0]))

dijkstra(start)
for i in range(1,n+1) :
    if dp[i] == INF :
        print("INF")
    else :
        print(dp[i])
