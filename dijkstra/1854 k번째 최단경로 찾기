import sys
import heapq
input = sys.stdin.readline

n, m, k = map(int, input().split())
INF = int(1e9)
graph = [[] for _ in range(n+1)]
dp = [[INF]*k for _ in range(n+1)]

for _ in range(m) :
    a, b, c = map(int, input().split())
    graph[a].append([b, c]) # b = 도착지점 , c = 거리

q = []
def dijkstra() :
    start = 1
    heapq.heappush(q, [0, start]) # 거리, 도시
    dp[start][0] = 0
    while q :
        dist, node = heapq.heappop(q)
        for i, j in graph[node] :
            cost = j + dist
            if cost < dp[i][k-1] :
                dp[i][k-1] = cost
                dp[i].sort()
                heapq.heappush(q, (cost, i))

dijkstra()
#dp에서 1->i i도시까지 가는 거리들 출력
for i in range(1, len(dp)) :
    if dp[i][k-1] == INF :
        print(-1)
    else :
        print(dp[i][k-1])
