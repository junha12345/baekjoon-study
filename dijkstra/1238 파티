import sys
import heapq
input = sys.stdin.readline
INF = int(1e9)

n, m, x = map(int, input().split()) # 학생수, 도로수, 모이는장소
graph = [[] for _ in range(n+1)]
for _ in range(m) :
    a, b, d = map(int, input().split())
    graph[a].append([b,d])

def dijkstra(start,n) :
    q = []
    distance[start] = 0
    heapq.heappush(q, [distance[start], start])
    while q :
        dist, node = heapq.heappop(q)
        if distance[node] < dist :
            continue
        for i, j in graph[node] :
            cost = distance[node] + j
            if cost < distance[i] :
                distance[i] = cost
                heapq.heappush(q, [cost, i])
    if n == 1 : return distance
    else : return distance[x]+home[start]

distance = [INF]*(n+1)
home = dijkstra(x,1)
ans = 0
for i in range(1,n+1) :
    distance = [INF]*(n+1)
    idx = dijkstra(i,0)
    if idx>ans : ans = idx
print(ans)
