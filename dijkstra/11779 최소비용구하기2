import sys
import heapq
input = sys.stdin.readline

# n = 도시 개수, m = 버스 개수
n = int(input())
m = int(input())
graph = [[] for _ in range(n+1)]
INF = int(1e9)
distance = [INF] * (n+1)
visited = [[] for _ in range(n+1)] # 시작점을 기준

for _ in range(m) :
    a, b, c = map(int, input().split())
    graph[a].append([b, c])

def dijkstra(start, end) :
    q = []
    heapq.heappush(q, (0, start)) # q = [거리, 노드]
    distance[start] = 0
    visited[start].append(start)
    while q :
        dist, node = heapq.heappop(q)
        if dist > distance[node] :
            continue
        for i in graph[node] :
            cost = distance[node] + i[1]
            if cost < distance[i[0]] :
                distance[i[0]] = cost
                visited[i[0]] = visited[node].copy()
                visited[i[0]].append(i[0])
                heapq.heappush(q, (cost, i[0]))
    return distance[end]

start, end = map(int, input().split())

print(dijkstra(start, end))
print(len(visited[end]))
for i in range(len(visited[end])) :
    print(visited[end][i], end=' ')
