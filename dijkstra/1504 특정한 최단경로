# 1504 특정한 최단 경로
# 시작점 1, 도착점 n
# 마지막줄 거쳐야하는 두 정점

import sys
import heapq
input = sys.stdin.readline

n, m = map(int, input().split()) # n = 점 개수 + 마지막점, m = 간선 개수
graph = [[] for _ in range(n+1)]
INF = int(1e9)

for _ in range(m) :
    a, b, c = map(int, input().split())
    graph[a].append([b, c])
    graph[b].append([a, c])

r1, r2 = map(int, input().split())

def dijkstra(start, end) :
    q = []
    distance = [INF] * (n+1)
    heapq.heappush(q, (0, start)) # q = [거리, 노드]
    distance[start] = 0
    while q :
        dist, node = heapq.heappop(q)
        if dist > distance[node] :
            continue
        for i in graph[node] :
            cost = distance[node] +i[1]
            if cost < distance[i[0]] :
                distance[i[0]] = cost
                heapq.heappush(q, (cost, i[0]))
    return distance[end]

cost1 = dijkstra(1, r1) + dijkstra(r1, r2) + dijkstra(r2, n)
cost2 = dijkstra(1, r2) + dijkstra(r2, r1) + dijkstra(r1, n)
if cost1 >= INF and cost2 >= INF :
    print(-1)
else :
    print(min(cost1, cost2))
