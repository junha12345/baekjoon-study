# Tarjan 알고리즘
# 각 노드에 id 를 메겨서 부모의 id 를 따라감 --> 같은 parent를 가진 노드끼리 SCC구성
import sys
input = sys.stdin.readline
sys.setrecursionlimit(10**6)

v, e = map(int, input().split())
graph = [[] for _ in range(v+1)]
for _ in range(e) :
    a, b = map(int, input().split())
    graph[a].append(b)

def dfs(node) :
    global ids
    ids += 1
    d[node] = ids
    stack.append(node)
    parent = d[node]
    for i in graph[node] :
        if d[i] == 0 : # 미방문
            parent = min(parent, dfs(i))
        elif finished[i] == 0 : # 방문했지만 처리X
            parent = min(parent, d[i])
    w = -1
    if parent == d[node] :
        scc = []
        while w != node :
            w = stack.pop()
            scc.append(w)
            finished[w] = 1
        ans.append(sorted(scc))
    return parent

stack = []
ans = []
d = [0]*(v+1) # 방문 확인
finished = [0]*(v+1) # 처리 확인
ids = 0
for i in range(1, v+1) :
    if d[i] == 0 :
        dfs(i)
print(len(ans))
for i in sorted(ans) :
    print(*i, -1)
