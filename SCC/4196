# idea SCC로 묶은 후 특정 SCC 자체의 indegree 가 0 인 SCC의 갯수
# 예외 = 만약 모든 원소가 SCC에 포함할 시 1 출력
import sys
input = sys.stdin.readline
sys.setrecursionlimit(10**6)

def dfs(node) :
    global ids
    global idx
    ids += 1
    d[node] = ids
    stack.append(node)
    parent = d[node]
    for i in graph[node] :
        if d[i] == 0 : # 미방문
            parent = min(parent, dfs(i))
        elif finished[i] == 0 : # 방문했지만 처리X
            parent = min(parent, d[i])
    w = -1
    if parent == d[node] :
        scc = []
        while w != node :
            w = stack.pop()
            scc.append(w)
            finished[w] = 1
            nscc[w] = idx
        ans.append(sorted(scc))
        idx += 1
    return parent

t = int(input())
for _ in range(t) :
    idx = 0
    v, e = map(int, input().split())
    ind = [[] for _ in range(v+1)]
    graph = [[] for _ in range(v+1)]
    for _ in range(e) :
        a, b = map(int, input().split())
        graph[a].append(b)
        ind[b].append(a)
    stack = []
    ans = []
    d = [0]*(v+1) # 방문 확인
    finished = [0]*(v+1) # 처리 확인
    nscc = [-1]*(v+1)
    ids = 0
    for i in range(1, v+1) :
        if d[i] == 0 :
            dfs(i)
    scc_graph = {i : [] for i in set(nscc[1:])}
    for i in range(1, v+1) :
        for j in graph[i] :
            if nscc[i] != nscc[j] :
                scc_graph[nscc[j]].append(nscc[i])
    cnt = 0
    for _,n in scc_graph.items() :
        if len(n) == 0 :
            cnt += 1
    if cnt : print(cnt)
    else : print(1)
